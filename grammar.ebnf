function_definition = [{" "}], "fn ", identifier, "(", arg_list, ")", [{" "}], "{", [{statement | comment}], function_return, "}", [{"\n}]; 
program  = {function_definition | expression | statement};
identifier  = {a-z | A-Z | 0-9};
number  = {0-9};
boolean  = "true" | "false";
string  = '"', {}, '"';
function_call  = [{" "}], identifier, "(", arg_list, ")";
arg_list = arg | other_arg)
parenthetical_expression  = "(", math_expression, ")"
l4  = function_call | number | identifier | parenthetical_expression;
l3_infix  = [{" "}], "^", [{" "}], l3
l3  = l4, [{l3}];
l2_infix  = [{" "}], ("*" | "/"), [{" "}], l3;
l2  = l3, [{l2}];
l1_infix  = [{" "}], ("+" | "-"), [{" "}], l2;
l1  = l2, [{l1_infex}];
math_expression  = l1;
expression  = string | boolean | function_call | math_expression | number | identifier;
statement  = [{"\n"}], variable_define, ";"
function_return  = [{"\n"}], [{" "}], "return ", (number | function_call | expression | identifier), ";", [{" "}], [{"\n"}]; 
variable_define  = [{" "}], "let ", identifier, [{" "}], "=", [{" "}], expression;
arguments  = e | (identifier | math_expression);
other_arg  = {(math_expression | number | identifier), ","}, (math_expression | number | identifier);
comment  = [{"\n"}], [{" "}], "//", {}, "\n";